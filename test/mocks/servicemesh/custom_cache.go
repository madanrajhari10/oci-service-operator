// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/servicemanager/servicemesh/k8s/cache/cache_manager.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	commons "github.com/oracle/oci-service-operator/pkg/servicemanager/servicemesh/utils/commons"
	v1 "k8s.io/api/core/v1"
	cache "k8s.io/client-go/tools/cache"
	controllerruntime "sigs.k8s.io/controller-runtime"
)

// MockCacheMap is a mock of CacheMap interface.
type MockCacheMap struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMapMockRecorder
}

// MockCacheMapMockRecorder is the mock recorder for MockCacheMap.
type MockCacheMapMockRecorder struct {
	mock *MockCacheMap
}

// NewMockCacheMap creates a new mock instance.
func NewMockCacheMap(ctrl *gomock.Controller) *MockCacheMap {
	mock := &MockCacheMap{ctrl: ctrl}
	mock.recorder = &MockCacheMapMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheMap) EXPECT() *MockCacheMapMockRecorder {
	return m.recorder
}

// NewSharedCaches mocks base method.
func (m *MockCacheMap) NewSharedCaches() map[commons.InformerCacheType]cache.SharedIndexInformer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSharedCaches")
	ret0, _ := ret[0].(map[commons.InformerCacheType]cache.SharedIndexInformer)
	return ret0
}

// NewSharedCaches indicates an expected call of NewSharedCaches.
func (mr *MockCacheMapMockRecorder) NewSharedCaches() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSharedCaches", reflect.TypeOf((*MockCacheMap)(nil).NewSharedCaches))
}

// MockCustomCache is a mock of CustomCache interface.
type MockCustomCache struct {
	ctrl     *gomock.Controller
	recorder *MockCustomCacheMockRecorder
}

// MockCustomCacheMockRecorder is the mock recorder for MockCustomCache.
type MockCustomCacheMockRecorder struct {
	mock *MockCustomCache
}

// NewMockCustomCache creates a new mock instance.
func NewMockCustomCache(ctrl *gomock.Controller) *MockCustomCache {
	mock := &MockCustomCache{ctrl: ctrl}
	mock.recorder = &MockCustomCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomCache) EXPECT() *MockCustomCacheMockRecorder {
	return m.recorder
}

// GetInformer mocks base method.
func (m *MockCustomCache) GetInformer() cache.SharedIndexInformer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInformer")
	ret0, _ := ret[0].(cache.SharedIndexInformer)
	return ret0
}

// GetInformer indicates an expected call of GetInformer.
func (mr *MockCustomCacheMockRecorder) GetInformer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInformer", reflect.TypeOf((*MockCustomCache)(nil).GetInformer))
}

// MockCacheSetup is a mock of CacheSetup interface.
type MockCacheSetup struct {
	ctrl     *gomock.Controller
	recorder *MockCacheSetupMockRecorder
}

// MockCacheSetupMockRecorder is the mock recorder for MockCacheSetup.
type MockCacheSetupMockRecorder struct {
	mock *MockCacheSetup
}

// NewMockCacheSetup creates a new mock instance.
func NewMockCacheSetup(ctrl *gomock.Controller) *MockCacheSetup {
	mock := &MockCacheSetup{ctrl: ctrl}
	mock.recorder = &MockCacheSetupMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheSetup) EXPECT() *MockCacheSetupMockRecorder {
	return m.recorder
}

// SetupWithManager mocks base method.
func (m *MockCacheSetup) SetupWithManager(mgr controllerruntime.Manager, cache cache.SharedInformer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetupWithManager", mgr, cache)
}

// SetupWithManager indicates an expected call of SetupWithManager.
func (mr *MockCacheSetupMockRecorder) SetupWithManager(mgr, cache interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupWithManager", reflect.TypeOf((*MockCacheSetup)(nil).SetupWithManager), mgr, cache)
}

// MockCacheMapClient is a mock of CacheMapClient interface.
type MockCacheMapClient struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMapClientMockRecorder
}

// MockCacheMapClientMockRecorder is the mock recorder for MockCacheMapClient.
type MockCacheMapClientMockRecorder struct {
	mock *MockCacheMapClient
}

// NewMockCacheMapClient creates a new mock instance.
func NewMockCacheMapClient(ctrl *gomock.Controller) *MockCacheMapClient {
	mock := &MockCacheMapClient{ctrl: ctrl}
	mock.recorder = &MockCacheMapClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheMapClient) EXPECT() *MockCacheMapClientMockRecorder {
	return m.recorder
}

// GetConfigMapByKey mocks base method.
func (m *MockCacheMapClient) GetConfigMapByKey(key string) (*v1.ConfigMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigMapByKey", key)
	ret0, _ := ret[0].(*v1.ConfigMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigMapByKey indicates an expected call of GetConfigMapByKey.
func (mr *MockCacheMapClientMockRecorder) GetConfigMapByKey(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigMapByKey", reflect.TypeOf((*MockCacheMapClient)(nil).GetConfigMapByKey), key)
}

// GetNamespaceByKey mocks base method.
func (m *MockCacheMapClient) GetNamespaceByKey(key string) (*v1.Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespaceByKey", key)
	ret0, _ := ret[0].(*v1.Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNamespaceByKey indicates an expected call of GetNamespaceByKey.
func (mr *MockCacheMapClientMockRecorder) GetNamespaceByKey(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespaceByKey", reflect.TypeOf((*MockCacheMapClient)(nil).GetNamespaceByKey), key)
}

// GetServiceByKey mocks base method.
func (m *MockCacheMapClient) GetServiceByKey(key string) (*v1.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceByKey", key)
	ret0, _ := ret[0].(*v1.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceByKey indicates an expected call of GetServiceByKey.
func (mr *MockCacheMapClientMockRecorder) GetServiceByKey(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceByKey", reflect.TypeOf((*MockCacheMapClient)(nil).GetServiceByKey), key)
}
